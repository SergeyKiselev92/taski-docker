name: Main Taski workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    # Блок services аналогичен docker-compose.yml
    services:
      postgres:
        image: postgres:13.10
        # Указываем имя тестовой базы, имя и пароль пользователя в открытом виде,
        # ведь эта база будет работать только во время прогона тестов
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        # Эта конструкция описывает проверку готовности сервиса postgres
        # Если её не будет, то тесты могут запуститься раньше, чем сервер PostgreSQL
        # В результате тесты опять решат, что базы нет, — и упадут
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt 
    # Этот шаг дополним переменными для доступа к БД
    - name: Test with flake8 and django tests
      # Добавляем env-переменные для доступа к БД
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: django_password
        POSTGRES_DB: django_db
        # Сервер БД запущен в Docker, но его порт проброшен на хост
        # Поэтому подключаемся к 127.0.0.1:5432
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        python -m flake8 backend/
        cd backend/
        python manage.py test
  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        # Авторизация на Docker Hub
        uses: docker/login-action@v2
        # При помощи with передаём в action параметры username и password
        with:
          username: ${{ secrets.DOCKER_NAME }}
          password: ${{ secrets.DOCKER_PASS }}
          # Хорошо ли держать логин и пароль прямо в коде workflow?
          # Нет, это нехорошо
      - name: Push to DockerHub
        # Одновременный билд и пуш образа в Docker Hub
        uses: docker/build-push-action@v4
        with:
          # Параметр context: ./backend/ указывает, что нужный Dockerfile 
          # находится в ./backend/
          context: ./backend/
          # Параметр push: true указывает, что образ нужно не только собрать,
          # но и отправить на Docker Hub
          push: true
          # В параметре tags задаётся название и тег для образа.
          # Для каждого пересобранного образа 
          # устанавливаем тег latest, чтобы потом
          # на сервере и в docker-compose.yml не указывать версию
          tags: sergeykiselev92/taski_backend:latest 
  frontend_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up nodeJS
      # Это готовый воркфлоу для установки Node.js на раннер
        uses: actions/setup-node@v3
        with:
        # Это параметр воркфлоу, указывающий нужную версию Node.js
          node-version: 18

      - name: Install dependencies
      # Эта команда устанавливает зависимости для фронтенда
        run: |
          cd frontend/
          npm ci

      - name: Test frontend
      # Запускаем тесты
        run: |
          cd frontend/
          npm run test
  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_NAME }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: sergeykiselev92/taski_frontend:latest 
  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_NAME }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: true
          tags: sergeykiselev92/taski_gateway:latest
  deploy:
    runs-on: ubuntu-latest
    needs: 
      # Дождёмся билда всех образов Taski
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    # Копируем docker-compose.production.yml на продакшен-сервер
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
    # Передаём параметры для action appleboy/scp-action:
      with:
        host: 89.169.167.91
        username: yc-user
        key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCaijsDfm6rC05vR3mj74PhhngTCuPPRhPi5HlH7YE/UtIGTQGYHI1QEHO298QqkhuhXrXNARR3feET5RODmbZAmSSIm/28ZebYs/yGjHxBsHQL7K9u8ua/dt3TXlr8/o+WPwvzubc9i02CyrIIUD//yPnxsiDpBYbsRB+747XFSkiinNKgxB/xcmibXJwlrNaVf9xLCuyjPYCKqPZ29mq45b3DR5rJ3e9+enbCVUisvZ9AYJs9X4bXzo5TawqyC/FtC18GFvTyWmP9oaXeJEhE5egH2t/UHIPHEa6KITHhqszof6C3OjM0LNb9lvitsBik/HTI9r7HU6VJWu33KG4a1NJmnuu5C6ajQAAldKsCJGSAcBoaPl04ADQ0XUrCe2pgCwIhuNQRWShQFFlhI5iH2tYe6InwNqZ/evwpTwGqB7dJx0SxbseHZdlZhkrOjbne0biBB3fMc+2Qz+QEFXGk4oPasBXjDZllXP9Uj/dlo7jj6W53kiA5yy88dn1Uzgs= yc-user@epdn77hbevcubj67p8ol
        passphrase: JlOv3bJ-5z
        source: "docker-compose.production.yml"
        target: "taski"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: 89.169.167.91
        username: yc-user
        key: -----BEGIN OPENSSH PRIVATE KEY-----
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
-----END OPENSSH PRIVATE KEY-----

        passphrase: JlOv3bJ-5z
        # Параметр script передаёт в action appleboy/ssh-action команды,
        # которые нужно выполнить на сервере, 
        # с которым установлено соединение
        script: |
          cd taski
          # Выполняет pull образов с Docker Hub
          sudo docker compose -f docker-compose.production.yml pull
          # Перезапускает все контейнеры в Docker Compose
          sudo docker compose -f docker-compose.production.yml down
          sudo docker compose -f docker-compose.production.yml up -d
          # Выполняет миграции и сбор статики
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
          sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/